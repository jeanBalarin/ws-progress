
/*------------------------------------------------------------------------
    File        : customerService.p
    Purpose     : camada de acesso ao banco CRUD

    Syntax      :

    Description : serviços associados a clientes operações e consultas no banco    

    Author(s)   : jeanBalarin
    Created     : Tue Sep 26 20:22:19 BRT 2023
    Notes       :
  ----------------------------------------------------------------------*/

/* ***************************  Definitions  ************************** */

BLOCK-LEVEL ON ERROR UNDO, THROW.

{customer/dscustomer.i}

DEFINE VARIABLE rowCont AS INTEGER NO-UNDO.


/* ***************************  Main Block  *************************** */

PROCEDURE findAllCustomer:
    DEFINE INPUT PARAMETER inpPageSize AS INTEGER NO-UNDO.
    DEFINE INPUT PARAMETER inpCodPage  AS INTEGER NO-UNDO.
    DEFINE INPUT PARAMETER c-where     AS CHARACTER NO-UNDO.
    DEFINE OUTPUT PARAMETER DATASET FOR dsCustomer. // temporary table for data output 
    DEFINE OUTPUT PARAMETER iCodeStatus AS INTEGER  NO-UNDO.
    DEFINE QUERY qCust FOR Customer.
    //MESSAGE 'chamou as : ' + string(today, "99/99/99") +  " "  + string(time, "hh:mm:ss").
    
    // desativa o preenchimento das tabelas que nao tem relação com as tabelas do banco.
    BUFFER  ttErro:FILL-MODE    = "NO-FILL".
    BUFFER  ttResultsCust:FILL-MODE = 'NO-FILL'.
    BUFFER  ttPage:FILL-MODE    = "NO-FILL".
    
    // definição da query que vai fazer a consulta no banco
    DEFINE DATA-SOURCE srcCustomer FOR QUERY qCust.
    
    // attach do buffer da tt no data-source para carregar as informações.
    BUFFER ttCustomer:ATTACH-DATA-SOURCE (DATA-SOURCE srcCustomer:HANDLE).
    
    OPEN QUERY qCust FOR EACH Customer NO-LOCK.
    
    IF inpPageSize > 0 AND inpPageSize <> ? THEN DO:
        BUFFER ttCustomer:BATCH-SIZE = inpPageSize.  
    END.
    IF inpCodPage <> 0 AND inpCodPage <> ? THEN DO:
        
        FIND FIRST Customer NO-LOCK WHERE 
            RECID(Customer) = inpCodPage.
        IF AVAILABLE Customer THEN DO:
            DATA-SOURCE srcCustomer:RESTART-ROWID = ROWID(Customer).    
        END.
        ELSE DO:
            RETURN 'nok':U.
        END.
    END.
    MESSAGE DATA-SOURCE srcCustomer:FILL-WHERE-STRING.
    MESSAGE c-where.
    IF c-where <> '' AND c-where <> ? THEN DO:
      c-where = "For each Customer where " + c-where.
      DATA-SOURCE srcCustomer:FILL-WHERE-STRING = c-where.
       MESSAGE DATA-SOURCE srcCustomer:FILL-WHERE-STRING.
    END.
    
    rowCont = 0.
    BUFFER ttCustomer:SET-CALLBACK-PROCEDURE ("BEFORE-ROW-FILL", "pRowCont", THIS-PROCEDURE).
    
    DATASET dsCustomer:FILL (). 
    
    CREATE ttPage.
    IF rowCont > 0 THEN DO:
        IF DATA-SOURCE srcCustomer:NEXT-ROWID <> ? THEN DO:
            FIND FIRST Customer NO-LOCK WHERE 
                ROWID(Customer) = DATA-SOURCE srcCustomer:NEXT-ROWID  NO-ERROR.
                
            IF AVAILABLE Customer THEN DO:
                ASSIGN 
                    ttPage.nextPage = RECID(Customer).
            END.       
        END.
    END.
    ELSE DO:  
        ASSIGN  
            ttPage.nextPage = 0.
           
    END.
    ASSIGN 
        ttPage.sizePage = inpPageSize
        ttPage.rowCont = rowCont
        iCodeStatus = 200.
    RETURN.
    FINALLY:
        BUFFER ttCustomer:DETACH-DATA-SOURCE().    
    END FINALLY.
    
END PROCEDURE.

PROCEDURE findByIdCustomer:
    DEFINE INPUT PARAMETER ipCodigo AS INTEGER NO-UNDO.
    DEFINE OUTPUT PARAMETER DATASET FOR dsCustomer.
    DEFINE OUTPUT PARAMETER iCodeStatus AS INTEGER NO-UNDO.
    
    IF ipCodigo >= 0 THEN DO:
        FIND FIRST Customer NO-LOCK WHERE 
            Customer.CustNum = ipCodigo NO-ERROR.    
        
        IF AVAILABLE Customer THEN DO:
            BUFFER-COPY Customer TO ttCustomer.
            iCodeStatus = 200.
        END.
        ELSE DO:
            CREATE ttErro.
            ASSIGN 
                ttErro.msg     = 'Cliente não encontrado para codigo informado!'
                ttErro.success = FALSE
                iCodeStatus    = 404. // not found
        END.    
    END.
    ELSE DO:
        CREATE ttErro.
        ASSIGN 
            ttErro.msg     = 'Codigo informado é inválido!'
            ttErro.success = FALSE
            iCodeStatus    = 400. // bad request
    END.
END PROCEDURE.

DEFINE TEMP-TABLE ttNewCustomer-ref_only NO-UNDO REFERENCE-ONLY LIKE ttNewCustomer.

PROCEDURE pCreateCustomer:
    DEFINE INPUT PARAMETER TABLE FOR ttNewCustomer-ref_only .
    DEFINE OUTPUT PARAMETER DATASET FOR dsCustomer.
    DEFINE OUTPUT PARAMETER iCodeStatus AS INTEGER NO-UNDO.
    
    DO ON ERROR UNDO, LEAVE:
        IF CAN-FIND (FIRST ttNewCustomer-ref_only) THEN DO:
            FOR FIRST ttNewCustomer-ref_only:
                CREATE Customer.
                BUFFER-COPY ttNewCustomer-ref_only TO Customer.
                Customer.CustNum = NEXT-VALUE (NextCustNum).
                  
                CREATE ttResultsCust.
                ASSIGN 
                    ttResultsCust.CustNum  = Customer.CustNum
                    ttResultsCust.Name     = Customer.Name
                    ttResultsCust.SalesRep = Customer.SalesRep
                    ttResultsCust.success  = TRUE 
                    ttResultsCust.msg      = "Cliente criado com sucesso!"
                    iCodeStatus = 201.
            END.
        END.
        ELSE DO:
            CREATE ttErro.
            ASSIGN 
                ttErro.success = FALSE
                ttErro.msg     = 'Requisição imcompleta!'
                iCodeStatus    = 400.
        END.
        CATCH sysError AS Progress.Lang.SysError :
            CREATE ttErro.
            ASSIGN
                ttErro.success = FALSE 
                ttErro.msg     = sysError:GetMessage(1)
                iCodeStatus    = 500.      
        END CATCH. 
    END.
END.

PROCEDURE pUpdateCustomer:
    DEFINE INPUT PARAMETER ipCode AS INTEGER NO-UNDO.
    DEFINE INPUT PARAMETER TABLE FOR ttNewCustomer.
    DEFINE OUTPUT PARAMETER DATASET FOR dsCustomer.
    DEFINE OUTPUT PARAMETER icodeStatus AS INTEGER NO-UNDO.
    
    DO ON ERROR UNDO, LEAVE:
        FIND FIRST Customer EXCLUSIVE-LOCK WHERE
            Customer.CustNum = ipCode NO-ERROR.
        IF AVAILABLE Customer THEN DO:
            FOR FIRST ttNewCustomer NO-LOCK:
                BUFFER-COPY ttNewCustomer TO Customer.
            END.
            
            CREATE ttResultsCust.
            BUFFER-COPY Customer TO ttResultsCust.
            ASSIGN 
                ttResultsCust.success = TRUE
                ttResultsCust.msg     =  "Cliente Alterado com sucesso!"
                icodeStatus = 200.           
        END.
        ELSE DO:
            CREATE ttErro.
            ASSIGN
            ttErro.msg       = "Cliente não localizado"
            ttErro.success   = FALSE
            icodeStatus      = 400.
         END.
         CATCH sysErro AS Progress.Lang.Error :
             CREATE ttErro.
             ASSIGN
                 ttErro.msg     = sysErro:GetMessage(1)
                 ttErro.success = FALSE
                 icodeStatus    = 500.
         END CATCH.       
    END.
END PROCEDURE.

PROCEDURE pDeleteCustomer:
    DEFINE INPUT PARAMETER ipCode AS INTEGER NO-UNDO.
    DEFINE OUTPUT PARAMETER DATASET FOR dsCustomer.
    DEFINE OUTPUT PARAMETER icodeStatus AS INTEGER NO-UNDO.
    
    DO ON ERROR UNDO, LEAVE:
        FIND FIRST Customer EXCLUSIVE-LOCK WHERE
            Customer.CustNum = ipCode NO-ERROR.
        IF AVAILABLE Customer THEN DO:
            MESSAGE 'AVL CUSTOMER'
            VIEW-AS ALERT-BOX.
            CREATE ttResultsCust. 
            BUFFER-COPY Customer TO ttResultsCust.
            ASSIGN 
                ttResultsCust.success = TRUE
                ttResultsCust.msg     = "Cliente Deletado com sucesso!"
                icodeStatus           = 200. 
                
            DELETE Customer.  
            RELEASE Customer. 
            RELEASE ttResultsCust.           
        END.
        ELSE DO:
            CREATE ttErro.
            ASSIGN
                ttErro.msg     = "Cliente não localizado"
                ttErro.success = FALSE
                icodeStatus    = 400.
                RELEASE ttErro.
        END.
        CATCH sysErro AS Progress.Lang.Error :
            EMPTY TEMP-TABLE ttResultsCust.
            CREATE ttErro.
            ASSIGN
                ttErro.msg     = sysErro:GetMessage(1)
                ttErro.success = FALSE
                icodeStatus    = 500.
        END CATCH. 
        FINALLY:         
        END FINALLY.   
    END.
END PROCEDURE.

// Procedures rotinas Customer.
PROCEDURE pRowCont PRIVATE:
    DEFINE INPUT PARAMETER DATASET FOR dsCustomer.
    
    rowCont = rowCont + 1.
    
END PROCEDURE.
